<?php

include_once('bbcom_dictionary.features.inc');

define('BBCOM_DICTIONARY_VOTINGAPI_TAG', 'entry');

/**
 * Implementation of hook_menu().
 */
function bbcom_dictionary_menu() {
  $items = array();
  $items['admin/settings/bbcom/dictionary'] = array(
    'title' => 'Dictionary',
    'description' => 'Settings for BiblioBird.com Dictionary module.',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bbcom_dictionary_admin_settings'),
    'file' => 'bbcom_dictionary.admin.inc',
  );

  return $items;
}

/**
 * Implementation of hook_perm().
 */
function bbcom_dictionary_perm() {
  return array(
    'edit verified dictionary entries',
    'delete verified dictionary entries',
  );
}

/**
 * Implementation of hook_nodeapi().
 */
// Add entry summary information to the node view
function bbcom_dictionary_nodeapi(&$node, $op, $a3, $a4) {
  global $user;

  if ($op == 'view') {
    if ($node->type != LingwoEntry::$settings->content_type) {
      return NULL;
    }

    $entry = LingwoEntry::fromNode($node);

    // get the pos
    $pos = $entry->getPos();

    // get the source language
    $language = $entry->getSourceLanguage();

    // hide the fields and summary for non-admin users
    // TODO: should this be 'editor'?
    if (array_search('admin', $user->roles) == TRUE) {
      $node->content['entry_summary'] = array(
        '#weight' => -1,
        '#value'  => theme(array(
          'bbcom_dictionary_entry_summary_'. $language .'_'. $pos,
          'bbcom_dictionary_entry_summary_'. $language,
          'bbcom_dictionary_entry_summary'
        ), $node, $a3, $a4)
      );
    }
    else {
      unset($node->content['lingwo_fields']);
    }

    // add the "See also" section when viewing as a page
    if ($a4) {
      $node->content['bbcom_dictionary_see_also'] = array(
        '#weight' => 51,
        '#value' => theme('bbcom_dictionary_see_also', LingwoEntry::fromNode($node)),
      );
    }
  }
  elseif ($op == 'delete revision') {
    rules_invoke_event('node_delete_revision', $node);
  }
}

function _bbcom_dictionary_guidelines() {
  global $language;

  if ($nid = variable_get('bbcom_dictionary_editorial_guidelines', '')) {
    if ($node = node_load($nid)) {
      if ($node->tnid) {
        $translations = translation_node_get_translations($node->tnid);
        return $translations[$language->language]->nid;
      }
      else {
        return $nid;
      }
    }
  }
}

/*
 * Implementation of hook_form_alter().
 */
function bbcom_dictionary_form_alter(&$form, &$form_state, $form_id) {

  if ($form_id == (LingwoEntry::$settings->content_type .'_node_form')) {
    $entry = LingwoEntry::fromNode($form['#node']);
    $gnid = _bbcom_dictionary_guidelines();
    $gnid_arr = array('!url' => url('node/'. $gnid));
    $gmoreinfo = $gnid ? ' '. t('For more information, read the <a href="!url">editorial guidlines</a>.', $gnid_arr) : '';

    $form['bbcom_dictionary_guidelines'] = array(
      '#prefix' => '<div class="bbcom-dictionary-editorial-guidelines">',
      '#suffix' => '</div>',
      '#weight' => -20,
      '#value' => '<p>'. t('By submitting this form, you assert that the data you have entered is licensed under the <a href="http://creativecommons.org/licenses/by-sa/3.0/legalcode">Creative Commons Attribution-ShareAlike 3.0</a> (CC BY-SA 3.0) or compatible license.  If the data requires attribution, please include it in the "Sources" section below.') .'</p>',
    );
        
    if ($gnid) {
      $form['bbcom_dictionary_guidelines']['#value'] .= ' '. t('Please read all the <a href="!url">editorial guidelines</a>!', $gnid_arr);

      $form['buttons']['bbcom_dictionary_guidelines_confirm'] = array(
        '#type' => 'checkbox',
        '#weight' => -10,
        '#required' => TRUE,
        '#title' => t('I have read and understood the <a href="!url">editorial guidelines</a>', $gnid_arr),
      );
    }

    if ($entry->isTranslation()) {
      foreach (element_children($form['lingwo_senses']) as $key) {
        $c = count(element_children($form['lingwo_senses'][$key]['data']['translation']['trans']));
        $form['lingwo_senses'][$key]['data']['translation']['trans'][$c-1]['#description'] .= ' '.
          t('Include only 3 translations per sense. If you need more than 3 translations, what you probably really need is a new sense!') .' '. $gmoreinfo;
      }

      $form['lingwo_senses']['bbcom_dictionary_add_senses'] = array(
        '#value' => node_access('update', $entry->sourceNode) ? 
          t('You can\'t add or remove senses on this form, you have to <a href="!url">edit the source entry</a>.', array('!url' => url('node/'. $entry->sourceNode->nid .'/edit'))) :
          t('You don\'t have permission to add or remove senses, if necessary please <a href="!url">leave a comment</a> asking to have senses added or removed.', array('!url' => url('comment/reply/'. $entry->sourceNode->nid, array('fragment' => 'comment-form')))),
      );
    }
    else {
      // TODO: spruce up the form on original entries too!
    }

    drupal_add_css(drupal_get_path('module', 'bbcom_dictionary') .'/bbcom_dictionary.css');
  }
}

function bbcom_dictionary_lingwo_entry_verified($node) {
  $results = votingapi_select_results(array(
    'content_type' => 'node',
    'content_id'   => $node->nid,
    'tag'          => BBCOM_DICTIONARY_VOTINGAPI_TAG,
    'function'     => 'sum'
  ));
  $total_votes = $results[0]['value'];
  $verified_threshold = variable_get('bbcom_dictionary_verified_threshold', 2);
  return $total_votes >= $verified_threshold;
}

/**
 * Implementation of hook_lingwo_entry_access().
 */
function bbcom_dictionary_lingwo_entry_access($node, $op, $account) {
  if ($op == 'update' || $op == 'delete') {
    if (bbcom_dictionary_lingwo_entry_verified($node)) {
      if ($op == 'update' && !user_access('edit verified dictionary entries')) {
        return 'deny';
      }
      elseif ($op == 'delete' && !user_access('delete verified dictionary entries')) {
        return 'deny';
      }
    }
  }
}

/**
 * Implementation of hook_rules_event_info().
 */
function bbcom_dictionary_rules_event_info() {
  return array(
    'node_delete_revision' => array(
      'label' => t('After deleting content revision'),
      'module' => 'Node',
      'arguments' => array(
        'node' => array('type' => 'node', 'label' => t('The deleted revision'))
      ),
    )
  );
}

/**
 * Implementation of hook_block().
 */
function bbcom_dictionary_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $blocks[0] = array(
        'info' => t('BiblioBird.com Dictionary: Add Content Block'),
      );
      return $blocks;

    case 'view':
      if ($delta == 0 && user_access('create Lingwo entry content')) {
        $block['content'] = l(t('Create Dictionary Entry'), 'node/add/entry',
          array('attributes' => array('id' => 'create-content-link')));
        return $block;
      }
      break; 
  }
}

/**
 * Implementation of hook_link().
 *
 * Adds a link to an entries source entry.
 *
 */
/*
function bbcom_dictionary_link($type, $node, $teaser=FALSE) {
  if ($type == 'node' && $node->type == LingwoEntry::$settings->content_type &&
      ($source_node = lingwo_dictionary_entry_load_translation_source($node))) {
    
    $languages = language_list();
    $language_name = $languages[$source_node->language]->name;
    return array(
      'bbcom_dictionary-source' => array(
        'title' => t('Source entry in @lang', array('@lang' => $language_name)),
        'href'  => lingwo_dictionary_entry_path($source_node),
      )
    );
  }
}
*/

/**
 * Implementation of hook_field_formatter_info().
 */
function bbcom_dictionary_field_formatter_info() {
  return array(
    'text_link' => array(
      'label' => t('Link'),
      'field types' => array('text')
    ),
    'text_pre' => array(
      'label' => t('Pre'),
      'field types' => array('text')
    ),
  );
}

/**
 * Implementation of hook_theme().
 */
function bbcom_dictionary_theme() {
  return array(
    'bbcom_dictionary_entry_summary' => array(
      'arguments' => array('node' => NULL, 'teaser' => FALSE, 'page' => FALSE),
      'pattern' => 'bbcom_dictionary_entry_summary_',
    ),
    'bbcom_dictionary_see_also' => array(
      'arguments' => array('entry' => NULL),
    ),
    'bbcom_dictionary_formatter_text_link' => array(
      'arguments' => array('element' => NULL),
    ),
    'bbcom_dictionary_formatter_text_pre' => array(
      'arguments' => array('element' => NULL),
    ),
  );
}

function bbcom_dictionary_preprocess_node(&$vars) {
  $node = $vars['node'];
  if ($vars['teaser'] && $node->type == LingwoEntry::$settings->content_type) {
    // add a convenience link for editors
    if (node_access('update', $node)) {
      $links = $node->links;
      $links['quick-edit'] = array(
        'title' => t('Edit'),
        'href'  => 'node/'. $node->nid .'/edit',
      );

      // overwrite existing links
      $vars['links'] = theme('links', $links, array('class' => 'links inline'));
    }
  }
}

function template_preprocess_bbcom_dictionary_entry_summary(&$vars, $hook) {
  $node = $vars['node'];
  $entry = LingwoEntry::fromNode($node);

  // TODO: we need to get some "human" readable versions of the pos as well,
  // including the translations for other languages.
  $vars['pos'] = $entry->getPos();

  $translation_source = $entry->getTranslationSource();
  $vars['source_node'] = $translation_source ? $translation_source : $node;
  $vars['source_lang'] = $vars['source_node']->language;
  $vars['is_translation'] = _lingwo_is_translation($node);

  // get the source fields (we always deal with the source fields, so this should be
  // no surprise and we can name it simply $fields).
  $vars['fields'] = LingwoFields::mapItems($vars['source_node']->lingwo_fields);
}

function theme_bbcom_dictionary_entry_summary($node, $teaser=FALSE, $page=FALSE) {
  // TODO: is there some default that makes sense?
  return '';
}

function theme_bbcom_dictionary_see_also($entry) {
  // query entries with the same headword but different parts of speech
  // TODO: is it appropriate to do the actual querying inside the theme function?
  $results = LingwoEntry::searchHeadword($entry->headword, array('language' => $entry->sourceLanguage));
  if (count($results) == 1) {
    // if none, we return the empty string
    return '';
  }

  $items = array();
  foreach ($results as $result) {
    if ($result->pos == $entry->pos) {
      continue;
    }

    $other = LingwoEntry::fromNid($result->nid);
    if ($entry->isTranslation()) {
      $other = $other->getTranslation($entry->targetLanguage);
    }

    $items[] = l($other->headword . ' (' . $other->getPos(TRUE) . ')', $other->getPath());
  }

  return theme('item_list', $items, t('See also'), 'ul', array('class' => 'lingwo-entry-other-pos'));
}

function theme_bbcom_dictionary_formatter_text_link($element) {
  // we cheat by calling the default formatter first
  $value = theme('text_formatter_default', $element);
  return l($value, $value);
}

function theme_bbcom_dictionary_formatter_text_pre($element) {
  // we cheat by calling the default formatter first
  $value = theme('text_formatter_default', $element);
  // TODO: I'm not sure if this is the right thing to do..  Do we want a semantic <pre>?
  // Which to me goes in the middle of an article, like <p>, <p>, let me hit you with
  // some <pre>, then <p>, <p>.  It serves a totally different purpose than this..
  return '<div style="white-space: pre;">'. trim($value) .'</div>';
}



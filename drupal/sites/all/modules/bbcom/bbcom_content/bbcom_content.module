<?php

include_once('bbcom_content.features.inc');

/**
 * Implementation of hook_theme_registry_alter().
 */
function bbcom_content_theme_registry_alter(&$registry) {
  // pretend we are the theme and scan for templates
  $path = drupal_get_path('module', 'bbcom_content') . '/templates';
  foreach (array('insert_image', 'imagecache_insert_image') as $key) {
    $registry[$key]['template'] = $path . '/' . str_replace('_', '-', $key);
  }
}

/*
 * Implementation of hook_nodeapi().
 */
function bbcom_content_nodeapi(&$node, $op, $a3=NULL, $a4=NULL) {
  if ($node->type == lingwo_korpus_text_content_type() && $op == 'view') {
    if ($node->build_mode == NODE_BUILD_PREVIEW) {
      // add some Javascript to warn users if they try to nagivate away from a preview
      onbeforeunload_add_js();
      drupal_add_js(drupal_get_path('module', 'bbcom_content') . '/content-preview.js');
    }

    // make sure that the flag css and js are loaded
    drupal_add_js(drupal_get_path('module', 'flag') .'/theme/flag.js');
    drupal_add_css(drupal_get_path('module', 'flag') .'/theme/flag.css');
  }
  elseif ($node->type == LingwoEntry::$settings->content_type && $op == 'update') {
    // TODO: should this work with the 'translation' module's 'retranslate' checkbox instead?
    $flag = flag_get_flag('verified');
    if ($flag) {
      // if it isn't set as verified by the current usuer, remove the verified flag for everyone on this node
      if (!$node->flag['verified']) {
        db_query("DELETE FROM {flag_content} WHERE fid = %d AND content_id = %d", $flag->fid, $node->nid);
        db_query("DELETE FROM {flag_counts} WHERE fid = %d AND content_id = %d", $flag->fid, $node->nid);
      }

      // if this is a source node, remove the verified flag from all the nodes translations
      if (empty($node->tnid) || $node->tnid == $node->nid) {
        foreach (translation_node_get_translations($node->nid) as $lang_name => $trans) {
          if ($trans->nid != $node->nid) {
            db_query("DELETE FROM {flag_content} WHERE fid = %d AND content_id = %d", $flag->fid, $trans->nid);
            db_query("DELETE FROM {flag_counts} WHERE fid = %d AND content_id = %d", $flag->fid, $trans->nid);
          }
        }
      }
    }
  }
}

/**
 * Implementation of hook_link().
 */
function bbcom_content_link_alter(&$links, $node, $comment = NULL) {
  if (!module_exists('print') && $node->type == 'content') {
    // the book modules printer friend page won't work because it won't display the page
    // if the language is different than the language of the node -- some misuse of db_rewrite_sql().
    unset($links['book_printer']);
  }
}

/**
 * Implementation of hook_block().
 */
function bbcom_content_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $blocks[0] = array(
        'info' => t('BiblioBird.com Content: Add Content Block'),
      );
      return $blocks;

    case 'view':
      if ($delta == 0 && user_access('create content content')) {
        $block['content'] = l(t('Create Content'), 'node/add/content',
          array('attributes' => array('id' => 'create-content-link')));
        return $block;
      }
      break; 
  }
}

/*
 * Implementation of hook_form_alter().
 */
function bbcom_content_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'views_exposed_form') {
    if ($form_state['view']->name == 'search_content') {
      $form['submit']['#value'] = t('Search');
    }
    elseif ($form_state['view']->name == 'recent_content') {
      $form['has_audio']['#options']['1'] = t('Yes');
      unset($form['has_audio']['#options']['0']);

      $form['promoted']['#options']['1'] = t('Yes');
      $form['promoted']['#default_value'] = '1';
      unset($form['promoted']['#options']['0']);
    }
  }
}

/**
 * Implementation of hook_context_load_alter().
 */
function bbcom_content_context_load_alter(&$context) {
  if ($context->name === 'bbcom-section-content' && isset($context->reactions['block']) && $_GET['q'] === 'content') {
    // remove all the other blocks in the right sidebar except for the create content one
    foreach ($context->reactions['block']['blocks'] as $name => $block) {
      if ($block['region'] === 'right' && $name != 'bbcom_content-0') {
        unset($context->reactions['block']['blocks'][$name]);
      }
    }

    // add the views exposed filter
    $context->reactions['block']['blocks']['views--exp-recent_content-page'] = array(
      'module' => 'views',
      'delta' => '-exp-recent_content-page',
      'region' => 'right',
      'weight' => 3,
    );
  }
}

/**
 * Implementation of hook_nody_body_ajax().
 */
function bbcom_content_node_body_ajax($node, $teaser, $page) {
  // Do a minor trick to hide the content of premium nodes from users - really smart
  // folks will be able to get past it easily...
  return $node->premium && $page && $node->build_mode == NODE_BUILD_NORMAL;
}

/**
 * Implementation of hook_perm().
 */
function bbcom_content_perm() {
  return array(
    'edit field_remote_url',
  );
}

/**
 * Implementation of hook_field_access().
 *
 * Hack to control access to field_remote_url.
 */
function bbcom_content_field_access($op, $field, $account, $node) {
  if ($op == 'edit' && $field['field_name'] == 'field_remote_url') {
    return user_access('edit field_remote_url', $account);
  }
}

/////
// Theme functions

function bbcom_content_preprocess_imagecache_insert_image($vars) {
  if (empty($vars['width'])) {
    $filepath = $vars['item']['filepath'];

    // build the small image if it doesn't exist
    $dst = imagecache_create_path($vars['preset_name'], $filepath);
    if (!file_exists($dst)) {
      if ($preset = imagecache_preset_by_name($vars['preset_name'])) {
        $src = file_create_path($filepath);
        imagecache_build_derivative($preset['actions'], $src, $dst);
      }
    }

    // get the dimensions of the small image
    if ($image = image_get_info($dst)) {
      $vars['width'] = $image['width'];
      $vars['height'] = $image['height'];
    }
    else {
      $vars['width'] = $vars['height'] = NULL;
    }
  }

  $vars['original_url'] = file_create_url($vars['item']['filepath']);
}


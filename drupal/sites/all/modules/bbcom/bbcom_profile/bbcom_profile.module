<?php

include_once('bbcom_profile.features.inc');

/**
 * Implementation of hook_menu().
 */
function bbcom_profile_menu() {
  $items = array();
  $items['admin/settings/bbcom/profile'] = array(
    'title' => 'Profile',
    'description' => 'Settings for BiblioBird.com Profile module.',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bbcom_profile_admin_settings'),
    'file' => 'bbcom_profile.admin.inc',
  );
  return $items;
}

/**
 * Implementation of hook_theme().
 */
function bbcom_profile_theme() {
  return array(
    'bbcom_profile_badges' => array(
      'arguments' => array('roles' => NULL),
    ),
    'bbcom_profile_founder_number' => array(
      'arguments' => array('founder_number' => NULL),
    ),
  );
}

/**
 * Implementation of hook_perm().
 */
function bbcom_profile_perm() {
  return array('administer founder numbers');
}

/**
 * Implementation of hook_theme_registry_alter().
 */
function bbcom_profile_theme_registry_alter(&$registry) {
  if (isset($registry['author_pane_user_picture'])) {
    // we need our preprocess function to run before author_pane's
    array_unshift($registry['author_pane_user_picture']['preprocess functions'], 'bbcom_profile_pre_preprocess_author_pane_user_picture');
  }
}

function bbcom_profile_get_badges($account) {
  $roles = array();
  $titles = variable_get('bbcom_profile_role_titles', array());
  foreach ($account->roles as $rid => $role) {
    if (!empty($titles[$rid])) {
      $roles[] = array('rid' => $rid, 'role' => $role, 'title' => $titles[$rid]);
    }
  }
  return $roles;
}

/**
 * Implementation of hook_user().
 */
function bbcom_profile_user($type, &$edit, &$account, $category = NULL) {
  if ($type == 'view') {
    // remove the user picture, because we don't use it!  The styling messes up the layout.
    unset($account->content['user_picture']);

    // integrate the titles and badges
    $badges = bbcom_profile_get_badges($account);
    if (!empty($badges)) {
      $account->content['badges'] = array(
        '#type' => 'user_profile_category',
        '#title' => t('Badges'),
        '#weight' => -9,
      );
      
      $account->content['badges']['badges'] = array(
        '#type' => 'user_profile_item',
        '#value' => theme('bbcom_profile_badges', $badges),
      );

      if (in_array('founder', $account->roles) && !empty($account->founder_number)) {
        $account->content['badges']['founder_number'] = array(
          '#type' => 'user_profile_item',
          '#value' => theme('bbcom_profile_founder_number', $account->founder_number),
          '#weight' => 1,
        );
      }
    }
  }
  else if ($type == 'form' && $category == 'account' && in_array('founder', $account->roles)) {
    $form = array();
    $form['founder'] = array(
      '#type' => 'fieldset',
      '#title' => t('Founding member'),
      '#access' => user_access('administer founder numbers'),
    );
    $form['founder']['founder_number'] = array(
      '#type' => 'textfield',
      '#title' => t('Founder number'),
      '#default_value' => $account->founder_number,
    );
    return $form;
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function bbcom_profile_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if ($node->type == 'profile') {
    if ($op == 'presave') {
      $node->title = check_plain(user_load($node->uid)->name);
    }
    elseif (in_array($op, array('update', 'insert'))) {
      $field = $node->field_profile_image;
      $path = !empty($field[0]['filepath']) ? $field[0]['filepath'] : '';
      
      // Update the user's account picture.
      db_query("UPDATE {users} SET picture = '%s' WHERE uid = %d", $path, $node->uid);
    }
  }
}

/**
 * Implementation of hook_form_alter().
 */
function bbcom_profile_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'profile_node_form') {
    unset($form['menu']);

    $form['title']['#type'] = 'value';
    $form['title']['#required'] = FALSE;
    $form['#submit'][] = '_bbcom_profile_node_form_submit';
  }
  elseif ($form_id == 'user_profile_form') {
    unset($form['picture']);
  }
  elseif ($form_id == 'user_admin_settings') {
    // remove extra settings about the user picture that don't apply
    foreach (array('path', 'default', 'dimensions', 'file_size', 'guidelines') as $key) {
      $form['pictures']['settings']['user_picture_' . $key]['#type'] = 'value';
    }
  }
}

function _bbcom_profile_node_form_submit($form, &$form_state) {
  $form_state['value']['title'] = check_plain(user_load($form_state['value']['uid'])->name);
}

/**
 * Implementation of hook_profile_alter().
 */
function bbcom_profile_profile_alter(&$account) {
  // move the content profile to the top of the pile
  $account->content['content_profile']['#weight'] = -10;
}

//////
// Theming

function theme_bbcom_profile_badges($roles) {
  global $language;
  $langs = array($language->language);
  if ($language->language != 'en') {
    $langs[] = 'en';
  }

  $imgs = array();
  $text = array();
  foreach($roles as $role) {
    $name = str_replace(' ', '-', $role['role']);

    $found = FALSE;
    foreach ($langs as $lang) {
      $img = drupal_get_path('module', 'bbcom_profile') . "/badges/{$lang}/{$name}.png";

      if (file_exists($img)) {
        $imgs[] = theme('image', $img, $role['title'], $role['title'], array('class' => 'bbcom-badge'), TRUE);
        $found = TRUE;
        break;
      }
    }
    if (!$found) {
      $text[] = '<div class="bbcom-badge">'. check_plain($role['title']) .'</div>';
    }
  }
  return implode('', $imgs) . implode('', $text);
}

function theme_bbcom_profile_founder_number($founder_number) {
  return '<p><strong>' . t('Founder number %founder_number', array('%founder_number' => $founder_number)) . '</strong></p>';
}

function bbcom_profile_pre_preprocess_author_pane_user_picture(&$vars) {
  // tell author_pane to use the 'tiny' imagecache preset
  $vars['picture_preset'] = 'tiny';
}

function bbcom_profile_preprocess_author_pane(&$vars) {
  $account = $vars['account'];

  $badges = array();
  foreach (bbcom_profile_get_badges($account) as $badge) {
    if (in_array($badge['role'], array('admin', 'founder1', 'founder2', 'founder3'))) {
      $badges[] = $badge;
    }
  }
  if (!empty($badges)) {
    $vars['user_badges'] = theme('bbcom_profile_badges', $badges);

    if (in_array('founder', $account->roles) && !empty($account->founder_number)) {
      $vars['user_badges'] .= theme('bbcom_profile_founder_number', $account->founder_number);
    }
  }
}

function bbcom_profile_preprocess_node($vars) {
  $node = $vars['node'];
  if ($node->type == 'profile') {
    // remove links from the profile (this is useless 'Subscribe' etc, when viewing the user)
    unset($vars['links']);
    unset($vars['submitted']);
  }
}

function bbcom_profile_preprocess_content_profile_display_view(&$vars) {
  $node = $vars['node'];
  if ($node->type == 'profile') {
    // Remove the heading 'Profile' from the profile page, since it's redundant
    $vars['title'] = NULL;
  }
}


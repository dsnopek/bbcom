<?php

/**
 * @file
 * Defines a premium access product feature that grants customers access to nodes
 * on your site upon order completion.
 */

/**
 * DRS: All of the following was copied graciously from uc_node_access. Since there
 * is so much duplicate code, I'd rather make this into a handler for uc_node_access
 * but that depends on the uc_node_access maintainers. See this issue:
 *
 *     http://drupal.org/node/1781690
 */

/**
 * Implementation of hook_menu().
 */
function uc_premium_access_menu() {
  $items = array();

  $items['uc_premium_access/autocomplete'] = array(
    'title' => 'UC Premium Access autocomplete',
    'page callback' => 'uc_premium_access_autocomplete',
    'access arguments' => array('administer product features'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implementation of hook_cron().
 */
function uc_premium_access_cron() {
  $items = array();

  // Load and process any expired premium access rules.
  $result = db_query("SELECT uid, access_nid FROM {uc_premium_access_expirations} WHERE expiration <= %d", time());
  while ($access = db_fetch_array($result)) {
    // Revoke access for the user through the current premium access handler.
    uc_premium_access_op('revoke', $access['access_nid'], $access['uid']);

    // Delete the expiration from the database.
    db_query("DELETE FROM {uc_premium_access_expirations} WHERE uid = %d AND access_nid = %d", $access['uid'], $access['access_nid']);

    $items[] = t('User @uid lost access to <a href="!url">node @nid</a>.', array('@uid' => $access['uid'], '@nid' => $access['access_nid'], '!url' => url('node/'. $access['access_nid'])));

    $node = node_load($access['access_nid']);
    $account = user_load($access['uid']);

    ca_pull_trigger('uc_premium_access_revoke', $node, $account);
  }

  if (!empty($items)) {
    watchdog('uc_premium_access', 'The following expirations occurred: !expirations', array('!expirations' => theme('item_list', $items)));
  }

  $items = array();
  // Load and process any delayed premium access rules.
  $result = db_query("SELECT uid, pfid FROM {uc_premium_access_delays} WHERE inception <= %d", time());
  while ($access = db_fetch_array($result)) {
    // Grant access for the user through the current premium access handler.
    uc_premium_access_grant_user_access($access['pfid'], $access['uid']);

    // Delete the delay from the database.
    db_query("DELETE FROM {uc_premium_access_delays} WHERE uid = %d AND pfid = %d", $access['uid'], $access['pfid']);
  }
}

/**
 * Implementation of hook_product_feature().
 */
function uc_premium_access_product_feature() {
  $features[] = array(
    'id' => 'premium_access',
    'title' => t('Premium access'),
    'callback' => 'uc_premium_access_feature_form',
    'delete' => 'uc_premium_access_feature_delete',
    //'settings' => 'uc_premium_access_feature_settings_form',
  );

  return $features;
}

// Display the settings form for the premium access product feature.
function uc_premium_access_feature_form($form_state, $node, $feature) {
  drupal_add_css(drupal_get_path('module', 'uc_premium_access') .'/uc_premium_access.css');

  if (!empty($feature)) {
    $access = uc_premium_access_feature_load($feature['pfid']);
  }

  $options = array('' => t('<Any>'), $node->model => $node->model);
  if (module_exists('uc_attribute')) {
    $result = db_query("SELECT model FROM {uc_product_adjustments} WHERE nid = %d", $node->nid);
    while ($row = db_fetch_object($result)) {
      if (!in_array($row->model, $options)) {
        $options[$row->model] = $row->model;
      }
    }
  }
  $form['model'] = array(
    '#type' => 'select',
    '#title' => t('Applicable Model/SKU'),
    '#description' => t('Select the applicable product model/SKU.'),
    '#options' => $options,
    '#default_value' => $access['model'],
  );

  $form['access_nid'] = array(
    '#type' => 'textfield',
    '#title' => t('Node ID'),
    '#description' => t('Specify the node the customer will get access to after purchasing this product.<br />Start typing in a node title to view an autocomplete list that will change to an nid upon selection.'),
    '#default_value' => $access['access_nid'],
    '#autocomplete_path' => 'uc_premium_access/autocomplete',
    '#required' => TRUE,
  );

  $form['delay_period'] = array(
    '#type' => 'fieldset',
    '#title' => t('Access time delay'),
    '#collapsible' => FALSE,
    '#description' => t('Specify the length of time after purchase the customer must wait to have access to the node.'),
    '#attributes' => array('class' => 'time-period-fieldset'),
  );
  $form['delay_period']['delay_period_value'] = array(
    '#type' => 'select',
    '#options' => drupal_map_assoc(uc_range(0, 52)),
    '#default_value' => $access['delay_period_value'],
  );
  $form['delay_period']['delay_period_unit'] = array(
    '#type' => 'select',
    '#options' => array(
      'days' => t('day(s)'),
      'weeks' => t('week(s)'),
      'months' => t('month(s)'),
      'years' => t('year(s)'),
    ),
    '#default_value' => $access['delay_period_unit'],
  );

  $form['access_limit'] = array(
    '#type' => 'radios',
    '#title' => t('Access limit type'),
    '#description' => t('Select an access limit type to govern how long the customer will have access to the node.'),
    '#options' => array(
      'indefinite' => t('The customer can have indefinite access to the node.'),
      'time_period' => t('The customer can access the node for the time specified below.'),
      'end_date' => t('The customer can access the node until the date specified below.'),
    ),
    '#default_value' => $access['access_limit'],
    '#required' => TRUE,
  );

  $form['time_period'] = array(
    '#type' => 'fieldset',
    '#title' => t('Access time period'),
    '#collapsible' => FALSE,
    '#description' => t('Specify the length of time the customer should have access to the node.'),
    '#attributes' => array('class' => 'time-period-fieldset'),
  );
  $form['time_period']['time_period_value'] = array(
    '#type' => 'select',
    '#options' => drupal_map_assoc(uc_range(1, 52)),
    '#default_value' => $access['time_period_value'],
  );
  $form['time_period']['time_period_unit'] = array(
    '#type' => 'select',
    '#options' => array(
      'days' => t('day(s)'),
      'weeks' => t('week(s)'),
      'months' => t('month(s)'),
      'years' => t('year(s)'),
    ),
    '#default_value' => $access['time_period_unit'],
  );

  $form['end_date_fieldset'] = array(
    '#type' => 'fieldset',
    '#title' => t('Access end date'),
    '#collapsible' => FALSE,
    '#description' => t('Specify the end date on which a customer will lose access to the node.'),
  );
  $form['end_date_fieldset']['end_date'] = array(
    '#type' => 'date',
    '#default_value' => $access['end_date']
  );

  return uc_product_feature_form($form);
}

function uc_premium_access_feature_form_submit($form, &$form_state) {
  $access = array(
    'pfid' => $form_state['values']['pfid'],
    'model' => $form_state['values']['model'],
    'access_nid' => $form_state['values']['access_nid'],
    'access_limit' => $form_state['values']['access_limit'],
    'delay_period' => $form_state['values']['delay_period_value'] .' '. $form_state['values']['delay_period_unit'],
    'time_period' => $form_state['values']['time_period_value'] .' '. $form_state['values']['time_period_unit'],
    'end_date' => $form_state['values']['end_date'],
  );

  switch ($form_state['values']['access_limit']) {
    case 'time_period':
      $description = t('Grant access to <a href="!url">node @nid</a> for @period, @delay after purchase.', array('@nid' => $access['access_nid'], '@period' => $access['time_period'], '@delay' => $access['delay_period'], '!url' => url('node/'. $access['access_nid'])));
      break;
    case 'end_date':
      $description = t('Grant access to <a href="!url">node @nid</a> until @date, @delay after purchase.', array('@nid' => $access['access_nid'], '@date' => $access['end_date']['month'] .'/'. $access['end_date']['day'] .'/'. $access['end_date']['year'], '@delay' => $access['delay_period'], '!url' => url('node/'. $access['access_nid'])));
      break;
    case 'indefinite':
    default:
      $description = t('Grant indefinite access to <a href="!url">node @nid</a>, @delay after purchase.', array('@nid' => $access['access_nid'], '!url' => url('node/'. $access['access_nid']), '@delay' => $access['delay_period']));
      break;
  }

  if (!empty($access['model'])) {
    $description .= '<br />'. t('Applies to SKU: @sku', array('@sku' => $access['model']));
  }
  else {
    $description .= '<br />'. t('Applies to any SKU.');
  }

  $data = array(
    'pfid' => $access['pfid'],
    'nid' => $form_state['values']['nid'],
    'fid' => 'premium_access',
    'description' => $description,
  );

  $form_state['redirect'] = uc_product_feature_save($data);

  // On an insert, get the pfid used for the premium access feature.
  if (empty($access['pfid'])) {
    $access['pfid'] = db_last_insert_id('uc_product_features', 'pfid');
  }

  uc_premium_access_feature_save($access);
}

function uc_premium_access_feature_save($data) {
  // First attempt to update an existing row.
  db_query("UPDATE {uc_premium_access_products} SET model = '%s', access_nid = %d, access_limit = '%s', delay_period = '%s', time_period = '%s', end_date = '%s' WHERE pfid = %d",
    $data['model'], $data['access_nid'], $data['access_limit'], $data['delay_period'], $data['time_period'], serialize($data['end_date']), $data['pfid']);

  // Otherwise insert this feature as a new row.
  if (db_affected_rows() == 0) {
    db_query("INSERT INTO {uc_premium_access_products} (pfid, model, access_nid, access_limit, delay_period, time_period, end_date) VALUES (%d, '%s', %d, '%s', '%s', '%s', '%s')",
      $data['pfid'], $data['model'], $data['access_nid'], $data['access_limit'], $data['delay_period'], $data['time_period'], serialize($data['end_date']));
  }
}

function uc_premium_access_feature_load($pfid) {
  $access = db_fetch_array(db_query("SELECT nap.*, pf.nid FROM {uc_premium_access_products} AS nap LEFT JOIN {uc_product_features} AS pf ON nap.pfid = pf.pfid WHERE nap.pfid = %d", $pfid));
  if (!empty($access)) {
    list($access['delay_period_value'], $access['delay_period_unit']) = explode(' ', $access['delay_period']);
    list($access['time_period_value'], $access['time_period_unit']) = explode(' ', $access['time_period']);
    $access['end_date'] = unserialize($access['end_date']);
  }

  return $access;
}

function uc_premium_access_feature_delete($feature) {
  db_query("DELETE FROM {uc_premium_access_delays} WHERE pfid = %d", $feature['pfid']);
  db_query("DELETE FROM {uc_premium_access_products} WHERE pfid = %d", $feature['pfid']);
}

function uc_premium_access_op($op, $nid, $uid) {
  // Fail if we receive an invalid nid or uid.
  if (intval($nid) <= 0 || intval($uid) <= 0) {
    watchdog('uc_premium_access', 'Invalid arguments passed to UC premium access for processing.', array(), WATCHDOG_WARNING);
    return;
  }

  // Pass the arguments onto the handler for processing.
  // DRS: directly call into premium_access - we don't have any other 'handler' concept here.
  $result = premium_access_op($op, $nid, $uid);

  // Log failed premium access operations.
  if ($result === FALSE) {
    watchdog('uc_premium_access', 'A premium access operation failed! $op = @op, $nid = @nid, $uid = @uid', array('@op' => $op, '@nid' => $nid, '@uid' => $uid), WATCHDOG_WARNING);
  }
}

function uc_premium_access_delay_user_access($pfid, $uid) {
  $access = uc_premium_access_feature_load($pfid);

  if (empty($access) || $uid == 0) {
    return;
  }

  if ($access['delay_period_value']) {
    $inception = strtotime('+'. $access['delay_period']);
  }
  else {
    $inception = FALSE;
  }

  // Set the inception in the DB if necessary.
  if ($inception) {
    // Get a prior inception if one exists.
    $result = db_result(db_query("SELECT inception FROM {uc_premium_access_delays} WHERE uid = %d AND pfid = %d", $uid, $access['pfid']));

    // If there was no prior inception, insert a new one.
    if (empty($result)) {
      db_query("INSERT INTO {uc_premium_access_delays} (uid, pfid, inception) VALUES (%d, %d, %d)",
        $uid, $access['pfid'], $inception);
      watchdog('uc_premium_access', 'User @uid will be granted access to node @nid on @date.', array('@uid' => $uid, '@nid' => $access['access_nid'], '@date' => format_date($inception, 'custom', 'm/d/Y')));
    }
    elseif ($result > $inception) {
      // Otherwise we need to update the inception to be later.
      db_query("UPDATE {uc_premium_access_delays} SET inception = %d WHERE uid = %d AND pfid = %d", $inception, $uid, $access['pfid']);
      watchdog('uc_premium_access', 'User @uid hastened access to node @nid to @date.', array('@uid' => $uid, '@nid' => $access['access_nid'], '@date' => format_date($inception, 'custom', 'm/d/Y')));
    }
    else {
      watchdog('uc_premium_access', 'User @uid purchased duplicate access for node @nid that will be granted later than their current access.', array('@uid' => $uid, '@nid' => $access['access_nid']));
    }
  }
  else {
    // Delete any prior inception reference.
    db_query("DELETE FROM {uc_premium_access_delays} WHERE uid = %d AND pfid = %d", $uid, $access['pfid']);

    watchdog('uc_premium_access', 'User @uid granted immediate access to node @nid.', array('@uid' => $uid, '@nid' => $access['access_nid']));

    uc_premium_access_grant_user_access($pfid, $uid);
  }
}

function uc_premium_access_grant_user_access($pfid, $uid) {
  // Load up the premium access feature and target node data.
  $access = uc_premium_access_feature_load($pfid);
  $node = node_load($access['access_nid']);

  if (empty($access) || empty($node) || $uid == 0) {
    return;
  }

  // Grant access for the user through the current premium access handler.
  uc_premium_access_op('grant', $access['access_nid'], $uid);

  // Calculate an expiration timestamp based on the site's timezone.
  $expiration = FALSE;

  switch ($access['access_limit']) {
    case 'time_period':
      $expiration = strtotime('+'. $access['time_period']);
      break;
    case 'end_date':
      $expiration = gmmktime(0, 0, 0, $access['end_date']['month'], $access['end_date']['day'], $access['end_date']['year']);
      break;
  }

  // Set the expiration in the DB if necessary.
  if ($expiration) {
    // Get a prior expiration if one exists.
    $result = db_result(db_query("SELECT expiration FROM {uc_premium_access_expirations} WHERE uid = %d AND access_nid = %d", $uid, $access['access_nid']));

    // If there was no prior expiration, insert a new one.
    if (empty($result)) {
      db_query("INSERT INTO {uc_premium_access_expirations} (uid, access_nid, expiration) VALUES (%d, %d, %d)",
        $uid, $access['access_nid'], $expiration);
      watchdog('uc_premium_access', 'User @uid granted access to node @nid until @date.', array('@uid' => $uid, '@nid' => $access['access_nid'], '@date' => format_date($expiration, 'custom', 'm/d/Y')));
    }
    elseif ($result < $expiration) {
      // Otherwise we need to update the expiration to be later.
      db_query("UPDATE {uc_premium_access_expirations} SET expiration = %d WHERE uid = %d AND access_nid = %d", $expiration, $uid, $access['access_nid']);
      watchdog('uc_premium_access', 'User @uid extended access for node @nid until @date.', array('@uid' => $uid, '@nid' => $access['access_nid'], '@date' => format_date($expiration, 'custom', 'm/d/Y')));
    }
    else {
      watchdog('uc_premium_access', 'User @uid purchased duplicate access for node @nid that expires earlier than their current access.', array('@uid' => $uid, '@nid' => $access['access_nid'], '@date' => format_date($expiration, 'custom', 'm/d/Y')));
    }
  }
  else {
    // Delete any prior expiration reference.
    db_query("DELETE FROM {uc_premium_access_expirations} WHERE uid = %d AND access_nid = %d", $uid, $access['access_nid']);

    watchdog('uc_premium_access', 'User @uid granted indefinite access to node @nid.', array('@uid' => $uid, '@nid' => $access['access_nid']));
  }

  $account = user_load($uid);
  ca_pull_trigger('uc_premium_access_grant', $node, $account);
}

// Returns an autocomplete list for nodes on the premium access feature form.
function uc_premium_access_autocomplete($string = '') {
  $matches = array();

  if ($string) {
    // DRS: This should filter for only premium nodes!
    $result = db_query_range(db_rewrite_sql("SELECT n.nid, n.title FROM {node} n LEFT JOIN {premium_nodes} pn ON n.nid = pn.nid WHERE pn.level_name <> '' AND LOWER(n.title) LIKE LOWER('%s%%')"), $string, 0, 10);
    while ($node = db_fetch_object($result)) {
      $matches[$node->nid] = check_plain($node->title);
    }
  }

  print drupal_to_js($matches);
  exit();
}


/*******************************************************************************
 * Conditional Actions Integration
 ******************************************************************************/

/**
 * Implementation of hook_ca_trigger().
 */
function uc_premium_access_ca_trigger() {
  $triggers = array();

  $triggers['uc_premium_access_grant'] = array(
    '#title' => t('Premium access is granted to a user'),
    '#category' => t('Premium access'),
    '#arguments' => array(
      'node' => array(
        '#entity' => 'node',
        '#title' => t('Node'),
      ),
      'user' => array(
        '#entity' => 'user',
        '#title' => t('User'),
      ),
    ),
  );
  $triggers['uc_premium_access_revoke'] = array(
    '#title' => t('Premium access is revoked from a user'),
    '#category' => t('Premium access'),
    '#arguments' => array(
      'node' => array(
        '#entity' => 'node',
        '#title' => t('Node'),
      ),
      'user' => array(
        '#entity' => 'user',
        '#title' => t('User'),
      ),
    ),
  );

  return $triggers;
}

/**
 * Implementation of hook_ca_predicate().
 */
function uc_premium_access_ca_predicate() {
  $predicates = array();

  $predicates['uc_premium_access_grant_on_completed_status'] = array(
    '#title' => 'Grant appropriate premium access on ORDER UPDATE',
    '#description' =>  t('Renew purchased nodes if the order status matches.'),
    '#class' => 'uc_premium_access',
    '#status' => '1',
    '#weight' => '0',
    '#trigger' => 'uc_order_status_update',
    '#conditions' =>  array(
      '#operator' => 'AND',
      '#conditions' =>  array(
        array(
          '#name' => 'uc_order_status_condition',
          '#title' => 'Check the order status',
          '#argument_map' => array(
            'order' => 'order',
          ),
          '#settings' => array(
            'negate' => 1,
            'order_status' => 'completed',
          ),
        ),
        array(
          '#name' => 'uc_order_status_condition',
          '#title' => 'Check the order status',
          '#argument_map' => array(
            'order' => 'updated_order',
          ),
          '#settings' => array(
            'negate' => 0,
            'order_status' => 'completed',
          ),
        ),
      ),
    ),
    '#actions' => array(
      array(
        '#name' => 'uc_premium_access_grant_access',
        '#title' => 'Grant premium access to customer',
        '#argument_map' => array(
          'order' => 'order',
        ),
        '#settings' => array(),
      ),
    ),
  );

  return $predicates;
}

/**
 * Implementation of hook_ca_action().
 */
function uc_premium_access_ca_action() {
  $actions['uc_premium_access_delay_access'] = array(
    '#title' => t('Grant premium access to customer at a later time'),
    '#category' => t('UC Premium Access'),
    '#callback' => 'uc_premium_access_delay_access',
    '#arguments' => array(
      'order' => array('#entity' => 'uc_order', '#title' => t('Order')),
    ),
  );

  $actions['uc_premium_access_grant_access'] = array(
    '#title' => t('Grant premium access to customer'),
    '#category' => t('UC Premium Access'),
    '#callback' => 'uc_premium_access_grant_access',
    '#arguments' => array(
      'order' => array('#entity' => 'uc_order', '#title' => t('Order')),
    ),
  );

  return $actions;
}

function uc_premium_access_delay_access($order, $settings) {
  if (is_array($order->products)) {
    $nids = array();
    $models = array();

    foreach ($order->products as $product) {
      $nids[] = $product->nid;
      $models[] = $product->model;
    }

    $result = db_query("SELECT pf.pfid, nap.model FROM {uc_product_features} AS pf LEFT JOIN {uc_premium_access_products} AS nap ON pf.pfid = nap.pfid WHERE pf.nid IN (". implode(", ", $nids) .") AND pf.fid = 'premium_access'");
    while ($row = db_fetch_array($result)) {
      if (empty($row['model']) || in_array($row['model'], $models)) {
        uc_premium_access_delay_user_access($row['pfid'], $order->uid);
      }
    }
  }
}

function uc_premium_access_grant_access($order, $settings) {
  if (is_array($order->products)) {
    $nids = array();
    $models = array();

    foreach ($order->products as $product) {
      $nids[] = $product->nid;
      $models[] = $product->model;
    }

    $result = db_query("SELECT pf.pfid, nap.model FROM {uc_product_features} AS pf LEFT JOIN {uc_premium_access_products} AS nap ON pf.pfid = nap.pfid WHERE pf.nid IN (". implode(", ", $nids) .") AND pf.fid = 'premium_access'");
    while ($row = db_fetch_array($result)) {
      if (empty($row['model']) || in_array($row['model'], $models)) {
        uc_premium_access_grant_user_access($row['pfid'], $order->uid);
      }
    }
  }
}

/**
 * DRS: The following is new code that we didn't copy from uc_node_access. Keepying seperate so
 * that it'll be easier if this becomes a uc_node_access handler.
 */

/**
 * Implementation of hook_theme().
 */
function uc_premium_access_theme() {
  return array(
    'uc_premium_access_product_list' => array(
      'arguments' => array('products' => NULL, 'node' => NULL),
    ),
  );
}

/**
 * Implementation of hook_theme_registry_alter().
 */
function uc_premium_access_theme_registry_alter(&$theme_registry) {
  if (isset($theme_registry['premium_body'])) {
    $theme_registry['premium_body']['function'] = '_uc_premium_access_theme_premium_body';
  }
}

/**
 * Returns a list of products that you can buy which will enable access this particular node.
 */
function uc_premium_access_products($node) {
  $products = array();

  $res = db_query(db_rewrite_sql("SELECT n.nid, n.title FROM {node} AS n LEFT JOIN {uc_product_features} AS pf ON n.nid = pf.nid LEFT JOIN {uc_premium_access_products} AS nap ON pf.pfid = nap.pfid WHERE n.status = 1 AND nap.access_nid = %d"), $node->nid);
  while ($obj = db_fetch_object($res)) {
    $products[] = $obj;
  }

  // also include product kits that contain any of the above products
  if (module_exists('uc_product_kit')) {
    foreach ($products as $product) {
      $res = db_query(db_rewrite_sql("SELECT n.nid, n.title FROM {node} AS n LEFT JOIN {uc_product_kits} as pk ON n.vid = pk.vid WHERE n.status = 1 AND pk.product_id = %d"), $product->nid);
      while ($obj = db_fetch_object($res)) {
        $products[] = $obj;
      }
    }
  }

  // allow other modules to modify it
  drupal_alter('uc_premium_access_products', $products, $node);

  return $products;
}

/**
 * Overrides the 'premium_body' theme function, adding information about what products you can buy in order
 * to get access to this node.
 */
function _uc_premium_access_theme_premium_body($node) {
  $html = check_markup($node->teaser, $node->format, FALSE);
  $html .= '<div class="premium-message">';

  // TODO: this should probably be optional!
  $html .= '<div class="premium-message-text">';
  $html .= check_markup(t($node->premium_level['denied_message']), $node->premium_level['denied_message_format'], FALSE);
  $html .= '</div>';

  $products = uc_premium_access_products($node);
  if (!empty($products)) {
    $html .= theme('uc_premium_access_product_list', $products, $node);
  }

  $html .= '</div>';

  return $html;
}

/**
 * Shows a list of products you could buy that would give you access to this node.
 */
function theme_uc_premium_access_product_list($products, $node) {
  $html = '';

  if (count($products) == 1) {
    $html .= t('Purchase !link in order to get access!', array('!link' => l($products[0]->title, 'node/' . $products[0]->nid)));
  }
  else {
    $items = array();
    foreach ($products as $product) {
      $items[] = l($product->title, 'node/' . $product->nid);
    }

    $html .= theme('item_list', $items, t('Purchase one of these items to get access:'));
  }

  return $html;
}


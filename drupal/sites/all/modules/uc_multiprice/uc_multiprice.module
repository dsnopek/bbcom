<?php

/**
 * Provides Multiprice options
 *
 * Module developed by Docc | Optixdesigns.nl
 * @author Docc 
 * Module extended by Bartezz | Intrige.nl
 * @author Bartezz <bartezz@gmail.com>
 *
 */

/**
 * Hook Functions (Drupal)
 */

/**
 * Implementation of hook_init().
 */
function uc_multiprice_init() {
  uc_multiprice_country_id();
}

/**
 * Implementation of hook_menu().
 */
function uc_multiprice_menu() {
  $items['uc_multiprice/js'] = array(
    'page callback' => 'uc_multiprice_js',
    'access arguments' => array('create & edit multiprices'),
    'type' => MENU_CALLBACK,
  );
  $items['uc_multiprice/js/default'] = array(
    'page callback' => 'uc_multiprice_js',
    'access arguments' => array('administer multiprice'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/store/settings/multiprice'] = array(
    'title' => 'Multiprice',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_multiprice_admin_default'),
    'access arguments' => array('administer multiprice'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'uc_multiprice.admin.inc',
  );
  $items['admin/store/settings/multiprice/defaults'] = array(
    'title' => 'Multiprice Defaults',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_multiprice_admin_default'),
    'access arguments' => array('administer multiprice'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'uc_multiprice.admin.inc',
  );
  $items['admin/store/settings/multiprice/currencies'] = array(
    'title' => 'Multiprice Currencies',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_multiprice_admin_currencies'),
    'access arguments' => array('administer multiprice'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'uc_multiprice.admin.inc',
    'weight' => 1,
  );
  $items['admin/store/settings/multiprice/roles'] = array(
    'title' => 'Multiprice Roles',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_multiprice_admin_roles'),
    'access arguments' => array('administer multiprice roles'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'uc_multiprice.admin.inc',
    'weight' => 2,
  );

  return $items;
}

/**
 * Implementation of hook_perm().
 */
function uc_multiprice_perm() {
  return array('administer multiprice', 'create & edit multiprices', 'administer multiprice roles');
}

/**
 * Implementation of hook_theme().
 */
function uc_multiprice_theme() {
  return array(
    'uc_multiprice_form' => array(
      'arguments' => array('form' => NULL),
    ),
  );
}

/**
 * Implementation of hook_form_alter().
 */
function uc_multiprice_form_alter(&$form, $form_state, $form_id) {
  if (uc_product_is_product_form($form) && $form['type']['#value'] != "product_kit") {
    if (user_access('create & edit multiprices')) {
      // add multiprice form
      $multiprices = $form['#node']->multiprice;
      $form += uc_multiprice_form($multiprices, $form['#node']->nid);
      $form['#pre_render'][] = 'uc_multiprice_add_js';
      
      // take over the pricing
      $default->sell_price  = $form['base']['prices']['sell_price']['#default_value'];
      $default->cost        = $form['base']['prices']['cost']['#default_value'];
      $default->list_price  = $form['base']['prices']['list_price']['#default_value'];
      $default->country_id  = 0;
      $default->country_name  = 'Default';
      $form['multiprice']['multiprices'][$default->country_id] = uc_multiprice_field_element($default);
      $form['multiprice']['multiprices'][$default->country_id]['#weight'] = -1;
      unset($form['base']['prices']); 
    }
  }
  
  // Checkout form
  // add a page refresh when user select a delivery country
  if ($form_id == 'uc_cart_checkout_form') {
    drupal_add_js(drupal_get_path('module', 'uc_multiprice') .'/js/uc_multiprice.js', 'module', 'header');  
    $id = uc_multiprice_country_id();
    
    if (!empty($form['panes']['delivery'])) {
      $form['panes']['delivery']['delivery_country']['#default_value'] = $id;
      $form['#validate'][] = 'uc_multiprice_checkout_validate';
    }
  }
  
}

/**
 * Implementation of hook_form_validate().
 */
function uc_multiprice_checkout_validate($form, &$form_state) {
  $delivery_country = check_plain($form_state['values']['panes']['delivery']['delivery_country']);
  if ($delivery_country != uc_multiprice_country_id()) {
    uc_multiprice_country_id($delivery_country);
    $_SESSION['messages'] = array();
    drupal_goto('cart/checkout');
  }
}

/**
 * Implementation of hook_form_alter().
 */
function uc_multiprice_form_uc_country_formats_form_alter(&$form, &$form_state) {
  $currencies = array();
  $result = db_query("SELECT * FROM {uc_multiprice_currencies}");
  while ($mpc = db_fetch_array($result)) {
    $currencies[$mpc['country_id']] = $mpc;
  }
  
  $defaults = array(
    'currency_code' => variable_get('uc_currency_code', 'USD'),
    'sign' => variable_get('uc_currency_sign', '$'),
    'sign_after' => variable_get('uc_sign_after_amount', FALSE),
    'prec' => variable_get('uc_currency_prec', 2),
    'deci' => variable_get('uc_currency_dec', '.'),
    'thou' => variable_get('uc_currency_thou', ','),
    'label' => TRUE,
  );

  foreach (element_children($form['countries']) as $c) {
    $country = &$form['countries'][$c];

    $currency = (array)$currencies[$c] + $defaults;

    $country['currency'] = array(
      '#type' => 'fieldset',
      '#title' => t('Currency format'),
      '#summary callback' => 'summarize_form',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $country['currency']['currency_code'] = array(
      '#type' => 'textfield',
      '#title' => t('Default currency'),
      '#description' => t('While not used directly in formatting, the currency code is used by other modules as the primary currency for your site.  Enter here your three character <a href="!url">ISO 4217</a> currency code.', array('!url' => 'http://en.wikipedia.org/wiki/ISO_4217#Active_codes')),
      '#default_value' => $currency['currency_code'],
      '#maxlength' => 3,
      '#size' => 5,
    );

    $context = array(
      'revision' => 'formatted-original',
      'location' => 'currency-format-form',
    );
    $country['currency']['example'] = array(
      '#type' => 'textfield',
      '#title' => t('Current format'),
      '#value' => uc_price(1000.1234, $context, $currency),
      '#summary' => t('Currency format: @format', array('@format' => uc_price(1000.1234, $context, $currency))),
      '#disabled' => TRUE,
      '#size' => 10,
    );
    $country['currency']['sign'] = uc_textfield(t('Currency Sign'), $currency['sign'], FALSE, NULL, 10, 10);
    $country['currency']['sign']['#summary callback'] = 'summarize_null';

    $country['currency']['sign_after'] = array(
      '#type' => 'checkbox',
      '#title' => t('Display currency sign after amount.'),
      '#summary callback' => 'summarize_null',
      '#default_value' => $currency['sign_after'],
    );

    $country['currency']['thou'] = uc_textfield(t('Thousands Marker'), $currency['thou'], FALSE, NULL, 10, 10);
    $country['currency']['thou']['#summary callback'] = 'summarize_null';

    $country['currency']['deci'] = uc_textfield(t('Decimal Marker'), $currency['deci'], FALSE, NULL, 10, 10);
    $country['currency']['deci']['#summary callback'] = 'summarize_null';

    $country['currency']['prec'] = array(
      '#type' => 'select',
      '#title' => t('Number of decimal places'),
      '#options' => drupal_map_assoc(array(0, 1, 2)),
      '#summary callback' => 'summarize_null',
      '#default_value' => $currency['prec'],
    );
  }

  $form['#submit'][] = 'uc_multiprice_currencies_submit';
}

function uc_multiprice_currencies_submit($form, &$form_state) {
  foreach ($form_state['values']['countries'] as $id => $country) {
    $currency = $country['currency'];
    $currency['country_id'] = $id;

    drupal_write_record('uc_multiprice_currencies', $currency, 'country_id');
    if (!db_affected_rows()) {
      drupal_write_record('uc_multiprice_currencies', $currency);
    }
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function uc_multiprice_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if (uc_product_is_product($node)) {
    switch ($op) {
      case 'prepare';
        // New product? add defaults
        if (!$node->nid && !$node->multiprice && !$node->translation_source ) {
          $node->multiprice = variable_get('uc_multiprice_default', array());
        }
        elseif (!$node->nid && !$node->multiprice && $node->translation_source ) {
          $node->multiprice = $node->translation_source->multiprice;
        }
      break;  
      case 'load':  
        // load enabled roles
        $enabled_roles = array_filter(variable_get('uc_multiprice_roles', array()));
        $all_roles = user_roles();
        foreach ($enabled_roles as $k => $v) {
          $roles[$k] = $all_roles[$k];
        }
        
        // load uc_countries
        $result = db_query("SELECT country_id, country_name FROM {uc_countries} WHERE version > 0 ORDER BY country_name ASC");
        while ($country = db_fetch_object($result)) {
          $countries[$country->country_id] = $country->country_name;
        }

        // Add to node object
        $result = db_query("SELECT m.*, c.currency_code FROM {uc_multiprice} m LEFT OUTER JOIN {uc_multiprice_currencies} c ON m.country_id = c.country_id WHERE m.nid = %d", $node->nid);
        //$result = db_query("SELECT * FROM {uc_multiprice} WHERE nid = %d", $node->nid);
        while ($row = db_fetch_object($result)) {
          $row->currency_code = $row->currency_code ? $row->currency_code : variable_get('uc_currency_code', 'USD');
          $row->data = unserialize($row->data);  
          $row->sell_price = uc_store_format_price_field_value($row->sell_price);
          $row->list_price = uc_store_format_price_field_value($row->list_price);
          $row->cost = uc_store_format_price_field_value($row->cost);
          if ($row->country_id) {
            $row->country_name = $countries[$row->country_id] ? $countries[$row->country_id] : (module_exists('countries_api') ? countries_api_get_country($row->country_id) : $row->country_id) . ' - ' . t('disabled');
            $node->multiprice['country'][$row->country_id] = $row;
          }
          else {
            $row->role_name = $roles[$row->role_id] ? $roles[$row->role_id] : $all_roles[$row->role_id] . ' - ' . t('disabled');
            $node->multiprice['role'][$row->role_id] = $row;
          }
        }
        // Replace product price with multiprice if it's not node form.
        // @todo: how about revisions?
        if ((arg(2) != 'edit') && (arg(2) != 'add') && (arg(2) != 'clone') && (arg(2) != 'convert')) {
          
          // get the current user's role
          global $user;
          $user_roles = $user->roles;
          // sort the user's roles by weight
          if (variable_get('role_weights_reorder_forms', FALSE)) {
            uksort($user_roles, '_role_weights_rid_compare');
          }

          foreach (array_keys($user_roles) as $k => $v) {
            // loop thru each role id
            if ($node->multiprice['role'][$v] && in_array($v, $enabled_roles)) {
              // if there is a price set for this role then output it, if the role still is enabled
              $node->sell_price = check_plain($node->multiprice['role'][$v]->sell_price);
              $node->list_price = check_plain($node->multiprice['role'][$v]->list_price);
              $node->cost       = check_plain($node->multiprice['role'][$v]->cost);
              $rolebased = TRUE;
              // and break if we output a price, since it's by role weight
              break;
            }
          }
          if (!$rolebased && !variable_get('uc_multiprice_roles_fallback', NULL) ||
              !$rolebased && variable_get('uc_multiprice_roles_fallback', NULL) && !array_intersect(array_keys($user_roles), $enabled_roles)) {
            $cid = uc_multiprice_country_id();
            if ($node->multiprice['country'][$cid]) {
              $node->sell_price = check_plain($node->multiprice['country'][$cid]->sell_price);
              $node->list_price = check_plain($node->multiprice['country'][$cid]->list_price);
              $node->cost       = check_plain($node->multiprice['country'][$cid]->cost);
            }
            // if 'disable unprice product' has been checked
          elseif (variable_get('uc_multiprice_currency_disable_unpriced_product', NULL)) {
              $currency = uc_multiprice_currency($cid);
              // and if the current users country currency doesn't match store default currency
              if ($currency != variable_get('uc_currency_code', 'USD')) {
                $pricehandlers = _uc_price_get_handlers(array(FALSE, FALSE));
                // and if multiprice currency price handler is enabled
                if ($pricehandlers['hook_data']['uc_multiprice']) {
                  $node->disabled_unpriced_product = TRUE;
                }
              }
            }
          }         
          
        }
      break;
      case 'presave';
        // reset the default pricing 
        // only if we have values to reset it with
        if ($node->multiprice['multiprices'][0]) {
          $node->sell_price = check_plain($node->multiprice['multiprices'][0]['sell_price']);
          $node->list_price = check_plain($node->multiprice['multiprices'][0]['list_price']);
          $node->cost       = check_plain($node->multiprice['multiprices'][0]['cost']);
          unset($node->multiprice['multiprices'][0]);
        }
      break;
      case 'insert':
      case 'update':
        if (count($node->multiprice['multiprices']) == 0)
          break;
        db_query("DELETE FROM {uc_multiprice} WHERE nid = %d", $node->nid);
        unset($node->multiprice['multiprices'][0]);
        foreach ((array)$node->multiprice['multiprices']['country'] as $country_id => $country) {
          if (empty($country->delete)) {
            db_query("INSERT INTO {uc_multiprice} (nid, country_id, list_price, cost, sell_price, data, role_id) VALUES (%d, %d, %f, %f, %f, '%s', %d)",
              $node->nid, $country['country_id'], $country['list_price'], $country['cost'], $country['sell_price'], serialize($country['dynamic']), $country['role_id']);
          }
        }
        foreach ((array)$node->multiprice['multiprices']['role'] as $role_id => $role) {
          if (empty($role->delete)) {
            db_query("INSERT INTO {uc_multiprice} (nid, country_id, list_price, cost, sell_price, data, role_id) VALUES (%d, %d, %f, %f, %f, '%s', %d)",
              $node->nid, $role['country_id'], $role['list_price'], $role['cost'], $role['sell_price'], serialize($role['dynamic']), $role['role_id']);
          }
        }
      break;
      case 'delete':
      db_query("DELETE FROM {uc_multiprice} WHERE nid = %d", $node->nid);
      break;
      case 'view':
        if ($node->disabled_unpriced_product) {
          $node->content['display_price']['#access'] = FALSE;
          // @todo probably this should be ran thru a theme function
          $node->content['sell_price']['#value'] = '<div class="product-unavailable">' . t('This listing is currently not available.') . '</div>';
          $node->content['add_to_cart']['#access'] = FALSE;
        }
      break;
    }
  }
}

/**
 * Implementation of hook_block().
 */
function uc_multiprice_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $blocks = array();
      $blocks[0] = array(
        'info' => t('Region select'),
        'cache' => BLOCK_NO_CACHE,
      );
      return $blocks;
    case 'configure':
      break;
    case 'save':
      break;
    case 'view':
      if ($delta == 0) {
        $block = array(
          'subject' => t('Country'),
          'content' => drupal_get_form('uc_multiprice_region_form'),
        );
        return $block;
      }
      break;
  }
}

/**
 * Hook Functions (Ubercart)
 */

/**
 * Implementation of hook_cart_pane().
 */
function uc_multiprice_cart_pane($items) {
  $panes[] = array(
    'id' => 'multiprice_country_cart_form',
    'title' => t('Multiprice - country switcher'),
    'enabled' => FALSE,
    'weight' => 0,
    'body' => !is_null($items) ? '<div id="multiprice-country-cart-form-pane">'. drupal_get_form('uc_multiprice_region_form', TRUE) .'</div>': '',
  );
  return $panes;
}
  
/**
 * Implementation of hook_order().
 */
function uc_multiprice_order($op, &$arg1, $arg2) {
  switch ($op) {
    case 'save':
      uc_multiprice_save_country_to_order($arg1->order_id);
      break;
  }
}

function uc_multiprice_uc_price_handler() {
  return array(
    'alter' => array(
      'title' => t('Multiprice currency handler'),
      'description' => t('Changes the currency of the displayed price based on its multiprice setting.'),
      'callback' => 'uc_multiprice_price_handler_alter',
    ),
  );
}

function uc_multiprice_price_handler_alter(&$price, &$context, &$options) {  
  // skip the multiprice handler if there is a price based on role
  // as currency should change on country, not on role
  
  global $user;
  $user_roles = $user->roles;
  $enabled_roles = array_filter(variable_get('uc_multiprice_roles', array()));
  // if the user has a multiprice enabled role then don't change currency
  // as role based pricing is in default currency
  if (!array_intersect(array_keys($user_roles), $enabled_roles)) {
    $cid = uc_multiprice_country_id();
    $result = db_query("SELECT * FROM {uc_multiprice_currencies} WHERE country_id = %d", $cid);
    if ($currency = db_fetch_array($result)) {
      $currency['dec'] = $currency['deci'];
      $options = $currency + $options;
      unset($options['deci']);
    }
  }
  if ($context['type'] == 'product') {
    $price['price'] = 0;
    $node = $context['subject']['node'];
    $node = node_load($node->nid);
    if ($node->type == "product_kit") { // Product kit
      foreach ($node->products as $product) {
        $field = ($context['field']) ? $product->$context['field'] : $product->sell_price; // check if its there
        $price['price'] += $field + $product->discount;
      }
    }
    else{
      $field = ($context['field']) ? $node->$context['field'] : $node->sell_price; // check if its there
      $price['price'] = $field;
    }
  }
}

/**
 * Helpers and Callbacks
 */

function uc_multiprice_form($multiprices, $default = NULL) {
  $form['multiprice'] = array(
    '#type' => 'fieldset',
    '#title' => t('Pricing'),
    //'#description' => t('You can override the global pricing by country.'),
    '#tree' => TRUE,
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['multiprice']['multiprices'] = array(
    '#type' => 'fieldset',
    '#tree' => TRUE,
    '#weight' => 0,
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#prefix' => '<div id="multiprice-countries">',
    '#suffix' => '</div>',
    '#theme' => (module_exists('uc_multiprice_dynamic')) ? 'uc_multiprice_dynamic_form' : 'uc_multiprice_form',
  );
  $exist = array();
  if (count($multiprices)!=0) {
    foreach ((array)$multiprices['country'] as $country) {
      if (module_exists('uc_multiprice_dynamic')) {
        $form['multiprice']['multiprices']['country'][$country->country_id] = uc_multiprice_dynamic_field_element($country);
        $form['multiprice']['multiprices']['country'][$country->country_id]['dynamic']['list_price'] = uc_multiprice_dynamic_element($country, 'list_price');
        $form['multiprice']['multiprices']['country'][$country->country_id]['dynamic']['cost']       = uc_multiprice_dynamic_element($country, 'cost');
        $form['multiprice']['multiprices']['country'][$country->country_id]['dynamic']['sell_price'] = uc_multiprice_dynamic_element($country, 'sell_price');
      }
      else{
        $form['multiprice']['multiprices']['country'][$country->country_id] = uc_multiprice_field_element($country);
      }
      $exist[] = $country->country_id;
    }
    foreach ((array)$multiprices['role'] as $role) {
      if (module_exists('uc_multiprice_dynamic')) {
        $form['multiprice']['multiprices']['role'][$role->role_id] = uc_multiprice_dynamic_field_element($role);
        $form['multiprice']['multiprices']['role'][$role->role_id]['dynamic']['list_price'] = uc_multiprice_dynamic_element($role, 'list_price');
        $form['multiprice']['multiprices']['role'][$role->role_id]['dynamic']['cost']       = uc_multiprice_dynamic_element($role, 'cost');
        $form['multiprice']['multiprices']['role'][$role->role_id]['dynamic']['sell_price'] = uc_multiprice_dynamic_element($role, 'sell_price');
      }
      else{
        $form['multiprice']['multiprices']['role'][$role->role_id] = uc_multiprice_field_element($role);
      }
      $exist[] = $role->role_id;
    }
  }
  // build country dropdown
  $multiprices = array();
  $multiprices[0] = 'Select country or role';
  // load enabled profiles
  $enabled_roles = array_filter(variable_get('uc_multiprice_roles', array()));
  $roles = user_roles();
  foreach ($enabled_roles as $k => $v) {
    if (!in_array($k, $exist)) {
      $multiprices['role|' . $k] = $roles[$k];
    }
  }
  // load countries
  $result = db_query("SELECT country_id, country_name FROM {uc_countries} WHERE country_id <> %d AND version > 0 ORDER BY country_name ASC", uc_store_default_country());
  
  while ($country = db_fetch_object($result)) {
  if (!in_array($country->country_id, $exist))
    $multiprices['country|' . $country->country_id] = $country->country_name; 
  }
  $form['multiprice']['more'] = array(
    '#type' => 'fieldset',
    '#title' => t('Add a price override for a country or role'),
    '#tree' => TRUE,
    '#weight' => 1,
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  
  $form['multiprice']['more']['list'] = array(
  '#type' => 'select',
  '#description' => t("Select the country/region/role to add a price override."),
  '#options' => $multiprices,
  '#ahah' => array(
    'path' => ($default) ? 'uc_multiprice/js/default' : 'uc_multiprice/js',
    'wrapper' => 'multiprice-countries',
    'method' => 'replace',
    'effect' => 'slide',
    ),
  );
  return $form;
}

function uc_multiprice_currency($cid) {
  $result = db_query("SELECT * FROM {uc_multiprice_currencies} WHERE country_id = %d", $cid);
  if ($currency = db_fetch_array($result)) {
    return $currency['currency_code'];
  }
  return;
}

/**
 * Sets or returns the country_id
 * Avaiable for other modules
 */
function uc_multiprice_country_id($country_id = FALSE) {
  if ($country_id) {
    $_SESSION['country_id'] = $country_id;
    // If we have an order, update the country associated with it.
    if (($order_id = intval($_SESSION['cart_order'])) > 0) {
      uc_multiprice_save_country_to_order($order_id);
    }
  }
  // Get Country by IP if not set
  if (empty($_SESSION['country_id'])) {
    // IP by ip2country
    if (module_exists('ip2country') && module_exists('countries_api')) {
      $country_code = ip2country_get_country(ip_address());
      $country = countries_api_get_country($country_code);
      $_SESSION['country_id'] = $country['numcode'];
    }
    // IP by ip2cc
    elseif (module_exists('ip2cc')) { 
      $country = ip2cc_get_country(ip_address());
      $_SESSION['country_id'] = $country->country_number;
    }    
    // Still nothing? use default country
    if (empty($country)) {
      $_SESSION['country_id'] = uc_store_default_country();
    }
  }
  return $_SESSION['country_id'];
}

function theme_uc_multiprice_form($form) {
  $output = '';
  $header = array(t('Country/role'), t('List price'), t('Cost'), t('Sell price'), t('Delete'));
  $row = array();

  foreach (element_children($form) as $multiprice_id) {
    $row = array();
    if ($multiprice_id == '0') {
      $row[] = check_plain($form[$multiprice_id]['title']['#value']);
      $row[] = drupal_render($form[$multiprice_id]['list_price']);
      $row[] = drupal_render($form[$multiprice_id]['cost']);
      $row[] = drupal_render($form[$multiprice_id]['sell_price']);
      $row[] = drupal_render($form[$multiprice_id]['delete']);
      $rows[] = $row;
    }
    else {
      foreach (element_children($form[$multiprice_id]) as $mpid) {
        $row = array();
        $row[] = check_plain($form[$multiprice_id][$mpid]['title']['#value']);
        $row[] = drupal_render($form[$multiprice_id][$mpid]['list_price']);
        $row[] = drupal_render($form[$multiprice_id][$mpid]['cost']);
        $row[] = drupal_render($form[$multiprice_id][$mpid]['sell_price']);
        $row[] = drupal_render($form[$multiprice_id][$mpid]['delete']);
        $rows[] = $row;
      }
    }
  }
  $output .= theme('table', $header, $rows, array('id' => 'uc_multiprice_table'));
  return $output;
}

function uc_multiprice_field_element($multiprice) {
  $field['country_id'] = array(
    '#type' => 'hidden',
    '#value' => $multiprice->country_id,
  );
  $field['role_id'] = array(
    '#type' => 'hidden',
    '#value' => $multiprice->role_id,
  );
  $field['title'] = array(
    '#type' => 'hidden',
    '#default_value' => $multiprice->country_name ? $multiprice->country_name : $multiprice->role_name,
  );
  $field['list_price'] = array(
    '#type' => 'textfield',
    '#required' => FALSE,
    '#default_value' => isset($multiprice->list_price) ? check_plain($multiprice->list_price) : 0.00,
    '#weight' => 0,
    '#size' => 20,
    '#maxlength' => 35,
  );
  $field['cost'] = array(
    '#type' => 'textfield',
    '#required' => FALSE,
    '#default_value' => isset($multiprice->cost) ? check_plain($multiprice->cost) : 0.00,
    '#weight' => 1,
    '#size' => 20,
    '#maxlength' => 35,
  );
  $field['sell_price'] = array(
    '#type' => 'textfield',
    '#required' => FALSE,
    '#weight' => 2,
    '#default_value' => isset($multiprice->sell_price) ? check_plain($multiprice->sell_price) : 0.00,
    '#size' => 20,
    '#maxlength' => 35,
  );
  $field['delete'] = array(
    '#type' => 'checkbox',
    '#required' => FALSE,
  );
  return $field;
}

function uc_multiprice_js() {
  if (!$_POST) {
    exit;
  }

  $form_state = array('submitted' => FALSE);
  $form_build_id = $_POST['form_build_id'];
  $form = form_get_cache($form_build_id, $form_state);
  
  list($type, $id) = explode('|', check_plain($_POST['multiprice']['more']['list']));

  if ($type == 'country') {
    // if one selected a cid
    $country = db_fetch_object(db_query("SELECT * FROM {uc_countries} WHERE country_id = %d", $id));
    if (module_exists('uc_multiprice_dynamic')) {
      $form['multiprice']['multiprices']['country'][$country->country_id] = uc_multiprice_dynamic_field_element($country);
      $form['multiprice']['multiprices']['country'][$country->country_id]['dynamic']['list_price'] = uc_multiprice_dynamic_element($country, 'list_price');
      $form['multiprice']['multiprices']['country'][$country->country_id]['dynamic']['cost']       = uc_multiprice_dynamic_element($country, 'cost');
      $form['multiprice']['multiprices']['country'][$country->country_id]['dynamic']['sell_price'] = uc_multiprice_dynamic_element($country, 'sell_price');
    }
    else{
      $form['multiprice']['multiprices']['country'][$country->country_id] = uc_multiprice_field_element($country);
    }
  } 
  elseif ($type == 'role') {
    // if one selected a rid
    $enabled_roles = array_filter(variable_get('uc_multiprice_roles', array()));
    $roles = user_roles();
    foreach ($enabled_roles as $k => $v) {
      if ($k == $id) {
        $role->role_id = $k;
        $role->role_name = $roles[$k];
      }
    }    
    if (module_exists('uc_multiprice_dynamic')) {
      $form['multiprice']['multiprices']['role'][$role->role_id] = uc_multiprice_dynamic_field_element($role);
      $form['multiprice']['multiprices']['role'][$role->role_id]['dynamic']['list_price'] = uc_multiprice_dynamic_element($role, 'list_price');
      $form['multiprice']['multiprices']['role'][$role->role_id]['dynamic']['cost']       = uc_multiprice_dynamic_element($role, 'cost');
      $form['multiprice']['multiprices']['role'][$role->role_id]['dynamic']['sell_price'] = uc_multiprice_dynamic_element($role, 'sell_price');
    }
    else {
      $form['multiprice']['multiprices']['role'][$role->role_id] = uc_multiprice_field_element($role);
    }
  }

  form_set_cache($form_build_id, $form, $form_state);

  // Rebuild the form. 
  $form = form_builder($_POST['form_id'], $form, $form_state);
  // return correct part
  unset($form['multiprice']['multiprices']['prefix']);
  unset($form['multiprice']['multiprices']['suffix']);
  $output = drupal_render($form['multiprice']['multiprices']);
  $output .= '<script type="text/javascript">Drupal.settings.uc_multiprice.'. $type .'.push('. $id .');$("#edit-multiprice-more-list option:selected").remove()</script>'; // bad programming?
  
  print drupal_to_js(array('status' => TRUE, 'data' => $output));
  exit;
}

function uc_multiprice_region_form($form_state, $show_label = FALSE) {
  $result = db_query("SELECT * FROM {uc_countries} WHERE version > 0 ORDER BY country_name ASC");
  while ($country = db_fetch_object($result)) {
    $countries[$country->country_id] = $country->country_name;
  }

  $form['country_id'] = array(
    '#type' => 'select',
    '#title' => ($show_label ? t('Choose country') : ''),
    '#default_value' => uc_multiprice_country_id(),
    '#options' => $countries,
    '#attributes' => array('onchange' => 'javascript:this.form.submit();'),
  );
  
  // hide the submit button
  $form['submit'] = array('#type' => 'submit', '#value' => t('Save'), '#attributes' => array('style' => 'display:none;'));
  return $form;  
}

/**
 * Save selection to session.
 */
function uc_multiprice_region_form_submit($form, &$form_state) {
  uc_multiprice_country_id($form_state['values']['country_id']);
}
  
/**
 * Save selected country id to the order.
 */
function uc_multiprice_save_country_to_order($order_id) {
  // Load up the existing data array.
  $data = db_result(db_query("SELECT data FROM {uc_orders} WHERE order_id = %d", $order_id));
  $data = unserialize($data);
  
  // Set the country.
  $data['country_id'] = uc_multiprice_country_id();
  
  // Save it again.
  db_query("UPDATE {uc_orders} SET data = '%s' WHERE order_id = %d", serialize($data), $order_id);
}

/**
 * Get countries from the multiprice form and add to drupal settings
 */
function uc_multiprice_add_js($form) {
  $countries = array();
  foreach ((array)$form['multiprice']['multiprices']['country'] as $key => $country) {
    if (is_array($country) && isset($country['country_id'])) {
      $countries[] = $key;
    }
  }
  $roles = array();
  foreach ((array)$form['multiprice']['multiprices']['role'] as $key => $role) {
    if (is_array($role) && isset($role['role_id'])) {
      $roles[] = $key;
    }
  }
  drupal_add_js(array('uc_multiprice' => array('country' => $countries, 'role' => $roles)), 'setting');
  return $form;
}

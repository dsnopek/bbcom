<?php
// $Id: uc_product_dependencies.module,v 1.1.2.2 2010/06/22 14:23:19 joelstein Exp $

define('UC_PRODUCT_DEPENDENCIES_CART', 0);
define('UC_PRODUCT_DEPENDENCIES_CART_OR_ORDER', 1);
define('UC_PRODUCT_DEPENDENCIES_ORDER', 2);
define('UC_PRODUCT_DEPENDENCIES_OR', 1);
define('UC_PRODUCT_DEPENDENCIES_AND', 2);

/**
 * Implementation of hook_menu().
 */
function uc_product_dependencies_menu() {
  $items['admin/store/settings/products/edit/product-dependencies'] = array(
    'title' => 'Product dependencies',
    'description' => t('Configure the product dependencies settings.'),
    'access arguments' => array('administer product dependencies'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_product_dependencies_settings_form'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
    'file' => 'uc_product_dependencies.admin.inc',
  );
  return $items;
}

/**
 * Implementation of hook_perm().
 */
function uc_product_dependencies_perm() {
  return array('administer product dependencies');
}

/**
 * Implementation of hook_help().
 */
function uc_product_dependencies_help($path, $arg) {
  if ($path == 'admin/store/settings/products/edit/product-dependencies') {
    return '<p>' . t('Restrict certain products from being purchased by requiring that its products dependencies are first purchased or added to the cart. This is accomplished through an existing Node Reference field.') . '</p>';
  }
}

/**
 * Implementation of hook_form_alter().
 * Alters the checkout form.
 */
function uc_product_dependencies_form_uc_cart_checkout_form_alter(&$form, &$form_state) {

  // Loop through each cart item
  $items = uc_cart_get_contents();
  foreach ($items as $item) {

    // If item fails dependency check, notify the user, and redirect to cart
    if (($message = uc_product_dependencies_check_dependencies($item->nid, $items)) !== TRUE) {
      $product = l($item->title, "node/$item->nid");
      $message = t($message);
      drupal_set_message($message, 'error');
      drupal_goto('cart');
    }
  }
}

/**
 * Returns TRUE if node has no dependencies, or if they are satisfied.
 * Otherwise, returns a message to be shown to the user.
 */
function uc_product_dependencies_check_dependencies($nid, $cart_items = NULL) {
  global $user;
  
  // Load the node
  $node = node_load($nid);
  
  // If node does not contain dependencies field, dependency check passes
  $nodereference = variable_get("uc_product_dependencies_{$node->type}_nodereference", '');
  if (empty($nodereference) or !isset($node->$nodereference)) {
    return TRUE;
  }
  
  // Build array of node's dependency NIDs
  $dependencies = array();
  foreach ($node->$nodereference as $value) {
    if ($value['nid']) {
      $dependencies[] = $value['nid'];
    }
  }
  
  // If node's dependency field has no values, dependency check passes
  if (empty($dependencies)) {
    return TRUE;
  }
  
  // Load module settings
  $multiple = variable_get('uc_product_dependencies_multiple', UC_PRODUCT_DEPENDENCIES_OR);
  $location = variable_get('uc_product_dependencies_location', UC_PRODUCT_DEPENDENCIES_CART_OR_ORDER);
  $order_status = variable_get('uc_product_dependencies_order_status', 'payment_received');
  
  // Get cart contents (if not passed as an argument)
  if ($cart_items === NULL) {
    $cart_items = uc_cart_get_contents();
  }
  
  // Build array of cart node IDs
  $cart_nids = array();
  foreach ($cart_items as $item) {
    $cart_nids[] = $item->nid;
  }
  $cart_nids = array_unique($cart_nids);
  
  // Node has dependencies, so assume they are unresolved for now
  $total_dependencies = count($dependencies);
  $resolved_dependencies = 0;
  
  // Loop through the dependencies
  foreach ($dependencies as $key => $dependency_nid) {
    
    // If dependency can be in cart, and it is, then this dependency is resolved
    if (in_array($location, array(UC_PRODUCT_DEPENDENCIES_CART, UC_PRODUCT_DEPENDENCIES_CART_OR_ORDER)) and in_array($dependency_nid, $cart_nids)) {
      $resolved_dependencies++;
      if ($multiple == UC_PRODUCT_DEPENDENCIES_AND) {
        unset($dependencies[$key]);
      }
    }
    
    // If dependency must be previously ordered, and the user is logged in,
    // and it was previously ordered by this user, and the order has the right status,
    // then this dependency is resolved
    if (in_array($location, array(UC_PRODUCT_DEPENDENCIES_CART_OR_ORDER, UC_PRODUCT_DEPENDENCIES_ORDER))
      and $user->uid
      and db_result(db_query("SELECT COUNT(*)
        FROM {uc_orders} o
        LEFT JOIN {uc_order_products} p ON o.order_id = p.order_id
        LEFT JOIN {uc_order_statuses} s ON o.order_status = s.order_status_id
        WHERE o.uid = %d
        AND p.nid = %d
        AND s.weight >= (SELECT weight FROM {uc_order_statuses} WHERE order_status_id = '%s')",
        $user->uid, $dependency_nid, $order_status))) {
      $resolved_dependencies++;
      if ($multiple == UC_PRODUCT_DEPENDENCIES_AND) {
        unset($dependencies[$key]);
      }
    }
  }
  
  // For "OR" behavior, if one dependency is resolved, dependency check passes
  if ($multiple == UC_PRODUCT_DEPENDENCIES_OR and $resolved_dependencies >= 1) {
    return TRUE;
  }
  // For "AND" behavior, if all dependencies are resolved, dependency check passes
  else if ($multiple == UC_PRODUCT_DEPENDENCIES_AND and $resolved_dependencies == $total_dependencies) {
    return TRUE;
  }
  
  // Build list of links to (remaining) dependencies (which user can access)
  $dependency_links = array();
  foreach ($dependencies as $dependency_nid) {
    $dependency_node = node_load($dependency_nid);
    if (node_access('view', $dependency_node)) {
      $dependency_links[] = '<strong>' . l($dependency_node->title, "node/$dependency_nid") . '</strong>';
    }
  }
  
  $product = l($node->title, "node/$node->nid");
  
  // If user can access none of the dependencies, or cannot access one of the
  // remaining "AND" dependencies, then it is likely that the product was misconfigured,
  // so we return a relevant message to the user, and log an error in watchdog
  if (empty($dependency_links) or ($multiple == UC_PRODUCT_DEPENDENCIES_AND and $total_dependencies - $resolved_dependencies != count($dependency_links))) {
    $message = t('The product <strong>!product</strong> has a dependency to which you do not have access. Please contact the site administrator to purchase this product.', array(
      '!product' => $product,
    ));
    $error = t('!user tried to purchase a !product, but failed because he/she lacks access to some or all of its products dependencies.', array(
      '!user' => $user->uid ? $user->name : t('An anonymous user'),
      '!product' => $product,
    ));
    watchdog('store', $error, NULL, WATCHDOG_WARNING, l('edit', "node/$node->nid" . '/edit'));
  }
  // Otherwise, return a message outlining the product dependencies
  else {
    switch ($location) {
      // Can be in cart
      case UC_PRODUCT_DEPENDENCIES_CART:
      case UC_PRODUCT_DEPENDENCIES_CART_OR_ORDER:
        // Multiple dependencies
        if (count($dependency_links) > 1) {
          $args = array('!product' => $product, '!dependencies' => join('</li><li>', $dependency_links));
          $message = $multiple == UC_PRODUCT_DEPENDENCIES_OR
            ? $message = t('To purchase a <strong>!product</strong>, you must first add one of the following to your cart: <ul><li>!dependencies</li></ul>', $args)
            : $message = t('To purchase a <strong>!product</strong>, you must first add all of the following to your cart: <ul><li>!dependencies</li></ul>', $args);
        }
        // Single dependency
        else {
          $args = array('!product' => $product, '!dependency' => $dependency_links[0]);
          $message = t('To purchase a <strong>!product</strong>, you must first add a !dependency to your cart.', $args);
        }
        break;
      // Must be purchased
      case UC_PRODUCT_DEPENDENCIES_ORDER:
        // Multiple dependencies
        if (count($dependency_links) > 1) {
          $args = array('!product' => $product, '!dependencies' => join('</li><li>', $dependency_links));
          $message = $multiple == UC_PRODUCT_DEPENDENCIES_OR
            ? $message = t('You may not purchase a <strong>!product</strong> until you purchase one of the following: <ul><li>!dependencies</li></ul>', $args)
            : $message = t('You may not purchase a <strong>!product</strong> until you purchase all of the following: <ul><li>!dependencies</li></ul>', $args);
        }
        // Single dependency
        else {
          $args = array('!product' => $product, '!dependency' => $dependency_links[0]);
          $message = t('You may not purchase a <strong>!product</strong> until you purchase a !dependency.', $args);
        }
        break;
    }
  }
  
  // At this point, dependency check has failed, so return the message
  return $message;
}

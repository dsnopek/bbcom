<?php
// $Id$

include_once('bbcom_flashcards.features.inc');
include_once('bbcom_flashcards.anki.inc');

/**
 * @file
 * Integrate Anki flashcards into BiblioBird.com
 */

/**
 * Implementation of hook_menu().
 */
function bbcom_flashcards_menu() {
  $items = array();
  $items['admin/settings/lingwo_dictionary/flashcards'] = array(
    'title' => 'Flashcards',
    'description' => 'Settings for BiblioBird.com Flashcards module.',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bbcom_flashcards_admin_settings'),
    'file' => 'bbcom_flashcards.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  // TODO: these pages aren't ready yet!
  /*
  $items['wial/%user'] = array(
    'title' => 'Words I Am Learning',
    'access callback' => 'bbcom_wial_page_access',
    'access arguments' => array(1),
    'page callback' => 'bbcom_flashcards_page_wial_view',
    'page arguments' => array(1),
    'file' => 'bbcom_flashcards.pages.inc',
    'type' => MENU_NORMAL_ITEM
  );
  $items['wial/%user/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['wial/%user/quiz'] = array(
    'title' => 'Quiz',
    'access callback' => 'bbcom_wial_page_access',
    'access arguments' => array(1),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bbcom_flashcards_page_wial_quiz_form', 1),
    'file' => 'bbcom_flashcards.pages.inc',
    'type' => MENU_LOCAL_TASK,
  );
  */

  return $items;
}

/**
 * Implementation of hook_perm
 */

/**
 * Implementation of hook_theme()
 */
function bbcom_flashcards_theme() {
  return array(
    'bbcom_flashcards_flashcard_front' => array(
      'arguments' => array('node' => NULL),
      'file' => 'bbcom_flashcards.theme.inc',
    ),
    'bbcom_flashcards_flashcard_back' => array(
      'arguments' => array('node' => NULL),
      'file' => 'bbcom_flashcards.theme.inc',
    ),
  );
}

/**
 * Implementation of hook_rules_action_info()
 */
function bbcom_flashcards_rules_action_info() {
  return array(
    'bbcom_flashcards_action_add_to_wial_deck' => array(
      'label' => t('Create flashcard in user\'s WIAL deck'),
      'arguments' => array(
        'node' => array('type' => 'node', 'label' => t('Entry')),
        'user' => array('type' => 'user', 'label' => t('User')),
      ),
      'module' => 'bbcom_flashcards',
    ),
    'bbcom_flashcards_action_remove_from_wial_deck' => array(
      'label' => t('Remove flashcard from user\'s WIAL deck'),
      'arguments' => array(
        'node' => array('type' => 'node', 'label' => t('Entry')),
        'user' => array('type' => 'user', 'label' => t('User')),
      ),
      'module' => 'bbcom_flashcards',
    ),
  );
}

/*
 * Implementation of hook_user_operations().
 */
function bbcom_flashcards_user_operations() {
  return array(
    'bbcom_flashcards_resync' => array(
      'label' => t('Re-sync user\'s flashcards'),
      'callback' => 'bbcom_flashcards_user_operations_resync'
    ),
  );
}

/*
 * Actions
 */

function bbcom_flashcards_action_add_to_wial_deck($node, $user) {
  if ($node->type == 'entry' && _ld_is_translation($node)) {
    try {
      bbcom_flashcards_anki_server_connect()
        ->openWialDeck($user->uid)
        ->addFactForNode($node);
    }
    catch (AnkiServerException $e) {
      watchdog('anki', $e->getMessage(), array(), WATCHDOG_ERROR);
      drupal_set_message(t('Unable to add flashcard to your "Words I am Learning" deck.'), 'error');
    }
  }
}

function bbcom_flashcards_action_remove_from_wial_deck($node, $user) {
  if ($node->type == 'entry' && _ld_is_translation($node)) {
    try {
      $deck = bbcom_flashcards_anki_server_connect()
        ->openWialDeck($user->uid);
      #$deck->deleteFact($deck->findFactForNode($node));
      $deck->deleteFactForNode($node);
    }
    catch (AnkiServerException $e) {
      watchdog('anki', $e->getMessage(), array(), WATCHDOG_ERROR);
      drupal_set_message(t('Unable to remove flashcard from your "Words I am Learning" deck.'), 'error');
    }
  }
}

/*
 * User operations.
 */

function bbcom_flashcards_user_operations_resync($accounts) {
  $flag = flag_get_flag('wial');
  foreach ($accounts as $uid) {
    // get an array of Lingwo IDs for every word on this user's WIAL
    $res = db_query('SELECT le.language as slang, n.language as tlang, le.headword, le.pos FROM {lingwo_dictionary_entry} le, {node} n, {flag_content} fc WHERE fc.fid = %d AND fc.uid = %d AND fc.content_id = n.nid AND n.tnid = le.nid', $flag->fid, $uid);
    $ids = array();
    while ($obj = db_fetch_object($res)) {
      $ids[] = "$obj->slang-$obj->tlang/$obj->headword($obj->pos)";
    }

    // call resyncFacts and so the AnkiServer can tell us which flashcards
    // are missing that we should add
    try {
      $deck = bbcom_flashcards_anki_server_connect()
        ->openWialDeck($uid);
      $res = $deck->resyncFacts($ids);
    }
    catch (AnkiServerException $e) {
      watchdog('anki', $e->getMessage(), array(), WATCHDOG_ERROR);
      drupal_set_message(t('Unable to resync flashcards for user !uid.', array('!uid' => $uid)), 'error');
      continue;
    }

    // add all the missing cards!
    //foreach ($res->missing as $id) {
    // TODO: should only mess with missing, but for now we readd everything
    foreach ($ids as $id) {
      $entry = LingwoEntry::fromLingwoId($id);
      if (_ld_is_translation($entry->getNode())) {
        try {
          $deck->addFactForNode($entry->getNode());
        }
        catch (AnkiServerException $e) {
          watchdog('anki', $e->getMessage(), array(), WATCHDOG_ERROR);
          drupal_set_message(t('Unable to add missing flashcard for user !uid', array('!uid' => $uid)), 'error');
        }
      }
    }
  }
}

/*
 * API functions
 */

function bbcom_flashcards_anki_server_connect() {
  return new AnkiServer(bbcom_flashcards_anki_server_url());
}

/*
 * Settings
 */

function bbcom_flashcards_anki_server_url($value = NULL) {
  if (is_null($value)) {
    return variable_get('bbcom_flashcards_anki_server_url', 'localhost:27701/decks');
  }
  variable_set('bbcom_flashcards_anki_server_url', $value);
}

